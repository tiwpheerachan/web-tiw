import streamlit as st
import requests
import time
import hashlib
import hmac
import urllib.parse
import json
import base64
from datetime import datetime

# ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ Shopee =====
PARTNER_ID = 1280109
PARTNER_KEY = "5a4e6e4c4d4375464c57506b7a42775a77466d686c534255574267514f494a54"
REDIRECT_URL = "https://web-tiw-f6am2usgmpzwel2adoj5qg.streamlit.app/"

# ===== Multiple Signature Methods =====
def create_signature_method1(partner_id, path, timestamp, access_token="", shop_id="", body=""):
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: Standard method"""
    if body:
        body_str = json.dumps(body, separators=(',', ':'), sort_keys=True)
        sign_base = f"{partner_id}{path}{timestamp}{body_str}"
    elif access_token and shop_id:
        sign_base = f"{partner_id}{path}{timestamp}{access_token}{shop_id}"
    else:
        sign_base = f"{partner_id}{path}{timestamp}"
    
    partner_key_bytes = bytes.fromhex(PARTNER_KEY)
    signature = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()
    return signature, sign_base

def create_signature_method2(partner_id, path, timestamp, access_token="", shop_id="", body=""):
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: Without body sorting"""
    if body:
        body_str = json.dumps(body, separators=(',', ':'))  # ‡πÑ‡∏°‡πà sort_keys
        sign_base = f"{partner_id}{path}{timestamp}{body_str}"
    elif access_token and shop_id:
        sign_base = f"{partner_id}{path}{timestamp}{access_token}{shop_id}"
    else:
        sign_base = f"{partner_id}{path}{timestamp}"
    
    partner_key_bytes = bytes.fromhex(PARTNER_KEY)
    signature = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()
    return signature, sign_base

def create_signature_method3(partner_id, path, timestamp, access_token="", shop_id="", body=""):
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: Base64 encoded key"""
    if body:
        body_str = json.dumps(body, separators=(',', ':'), sort_keys=True)
        sign_base = f"{partner_id}{path}{timestamp}{body_str}"
    elif access_token and shop_id:
        sign_base = f"{partner_id}{path}{timestamp}{access_token}{shop_id}"
    else:
        sign_base = f"{partner_id}{path}{timestamp}"
    
    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ key ‡πÄ‡∏õ‡πá‡∏ô base64
    try:
        partner_key_bytes = base64.b64decode(PARTNER_KEY)
    except:
        partner_key_bytes = PARTNER_KEY.encode('utf-8')
    
    signature = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()
    return signature, sign_base

def create_signature_method4(partner_id, path, timestamp, access_token="", shop_id="", body=""):
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: UTF-8 encoded key"""
    if body:
        body_str = json.dumps(body, separators=(',', ':'), sort_keys=True)
        sign_base = f"{partner_id}{path}{timestamp}{body_str}"
    elif access_token and shop_id:
        sign_base = f"{partner_id}{path}{timestamp}{access_token}{shop_id}"
    else:
        sign_base = f"{partner_id}{path}{timestamp}"
    
    partner_key_bytes = PARTNER_KEY.encode('utf-8')
    signature = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()
    return signature, sign_base

# ===== Test All Signature Methods =====
def test_all_signature_methods(code, shop_id):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á signature"""
    timestamp = int(time.time())
    path = "/api/v2/auth/token/get"
    url = f"https://partner.test-stable.shopeemobile.com{path}"
    
    body = {
        "code": code,
        "shop_id": int(shop_id),
        "partner_id": PARTNER_ID
    }
    
    methods = [
        ("Method 1: Hex + Sorted JSON", create_signature_method1),
        ("Method 2: Hex + Unsorted JSON", create_signature_method2),
        ("Method 3: Base64 Key", create_signature_method3),
        ("Method 4: UTF-8 Key", create_signature_method4)
    ]
    
    results = []
    
    for method_name, method_func in methods:
        try:
            signature, sign_base = method_func(PARTNER_ID, path, timestamp, body=body)
            
            params = {
                "partner_id": PARTNER_ID,
                "timestamp": timestamp,
                "sign": signature
            }
            
            headers = {"Content-Type": "application/json"}
            
            response = requests.post(url, params=params, json=body, headers=headers, timeout=10)
            
            result = {
                "method": method_name,
                "signature": signature,
                "sign_base": sign_base,
                "status_code": response.status_code,
                "response": response.text[:500],  # First 500 chars
                "success": response.status_code == 200
            }
            
            results.append(result)
            
        except Exception as e:
            results.append({
                "method": method_name,
                "error": str(e),
                "success": False
            })
    
    return results

# ===== Alternative API Testing =====
def test_shop_info_direct():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏î‡πâ‡∏ß‡∏¢ hardcoded token (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
    # ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    pass

def validate_partner_credentials():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Partner credentials"""
    issues = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partner ID
    if not str(PARTNER_ID).isdigit():
        issues.append("Partner ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partner Key
    if len(PARTNER_KEY) != 64:
        issues.append(f"Partner Key ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 64 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {len(PARTNER_KEY)})")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô hex ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        bytes.fromhex(PARTNER_KEY)
    except ValueError:
        issues.append("Partner Key ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà hex string ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Redirect URL
    if not REDIRECT_URL.startswith(('http://', 'https://')):
        issues.append("Redirect URL ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ http:// ‡∏´‡∏£‡∏∑‡∏≠ https://")
    
    return issues

# ===== IP Address Checker =====
def get_current_ip_comprehensive():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á"""
    ip_services = [
        ("ipify.org", "https://api.ipify.org?format=json", "ip"),
        ("httpbin.org", "https://httpbin.org/ip", "origin"),
        ("ipinfo.io", "https://ipinfo.io/json", "ip"),
        ("myip.com", "https://api.myip.com", "ip"),
        ("whatismyipaddress.com", "https://ipv4.icanhazip.com", "text")
    ]
    
    detected_ips = {}
    
    for service_name, url, key in ip_services:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                if key == "text":
                    ip = response.text.strip()
                else:
                    data = response.json()
                    ip = data.get(key, "").split(',')[0].strip()  # Handle multiple IPs
                
                if ip:
                    detected_ips[service_name] = ip
        except:
            detected_ips[service_name] = "Failed"
    
    return detected_ips

# ===== Streamlit App =====
st.set_page_config(page_title="Shopee Debug Center", page_icon="üîß", layout="wide")
st.title("üîß Shopee API Debug Center")

# Sidebar
st.sidebar.header("üõ†Ô∏è Debug Tools")

# Credential Validation
st.sidebar.subheader("üìã Credential Check")
if st.sidebar.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Credentials"):
    issues = validate_partner_credentials()
    if issues:
        for issue in issues:
            st.sidebar.error(f"‚ùå {issue}")
    else:
        st.sidebar.success("‚úÖ Credentials ‡∏î‡∏π‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# IP Address Check
st.sidebar.subheader("üåê IP Address Check")
if st.sidebar.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP..."):
        ips = get_current_ip_comprehensive()
        st.sidebar.write("**IP Addresses ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:**")
        for service, ip in ips.items():
            if ip != "Failed":
                st.sidebar.code(f"{service}: {ip}")
            else:
                st.sidebar.error(f"{service}: Failed")

# Main content
query_params = st.query_params
code = query_params.get("code")
shop_id = query_params.get("shop_id", "142837")

# Manual input
with st.sidebar:
    st.subheader("üîß Manual Input")
    manual_code = st.text_input("Authorization Code", value=code or "")
    manual_shop_id = st.text_input("Shop ID", value=shop_id)
    
    if st.button("‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á"):
        if manual_code and manual_shop_id:
            st.query_params.code = manual_code
            st.query_params.shop_id = manual_shop_id
            st.rerun()

# Debug Section
if code and shop_id:
    st.success(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö authorization code ‡πÅ‡∏•‡∏∞ shop_id: `{shop_id}`")
    
    # Test all signature methods
    st.subheader("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Signature")
    
    if st.button("üî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ", type="primary", use_container_width=True):
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á signature..."):
            results = test_all_signature_methods(code, shop_id)
            
            for i, result in enumerate(results, 1):
                with st.expander(f"üî¨ {result['method']}", expanded=result.get('success', False)):
                    if result.get('success'):
                        st.success(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Status Code: {result['status_code']}")
                        st.json(result['response'])
                        
                        # ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        try:
                            response_data = json.loads(result['response'])
                            if "access_token" in response_data:
                                st.session_state.access_token = response_data["access_token"]
                                st.session_state.refresh_token = response_data.get("refresh_token", "")
                                st.session_state.shop_id = shop_id
                                st.balloons()
                                st.success("üéâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Access Token ‡πÅ‡∏•‡πâ‡∏ß!")
                        except:
                            pass
                    else:
                        st.error(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! Status Code: {result.get('status_code', 'N/A')}")
                        if 'error' in result:
                            st.error(f"Error: {result['error']}")
                        else:
                            st.text(result.get('response', 'No response'))
                    
                    # ‡πÅ‡∏™‡∏î‡∏á debug info
                    st.write("**Debug Information:**")
                    st.code(f"Signature: {result.get('signature', 'N/A')}")
                    st.code(f"Sign Base: {result.get('sign_base', 'N/A')}")

    # Alternative debugging approaches
    st.divider()
    st.subheader("üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üåê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network", use_container_width=True):
            st.info("""
            **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network:**
            1. ‡πÄ‡∏õ‡∏¥‡∏î Developer Tools (F12)
            2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö Network
            3. ‡∏•‡∏≠‡∏á‡∏ó‡∏≥ request ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            4. ‡∏î‡∏π request/response headers
            5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payload ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
            """)
    
    with col2:
        if st.button("üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partner Key", use_container_width=True):
            st.info(f"""
            **Partner Key Analysis:**
            - Length: {len(PARTNER_KEY)} characters
            - First 10: {PARTNER_KEY[:10]}
            - Last 10: {PARTNER_KEY[-10:]}
            - Is Hex: {all(c in '0123456789abcdefABCDEF' for c in PARTNER_KEY)}
            
            **‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Shopee Console:**
            1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà App Management
            2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏≠‡∏õ test tiw
            3. ‡∏î‡∏π Test API Partner Key
            4. Copy key ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÉ‡∏™‡πà
            """)
    
    with col3:
        if st.button("‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Timestamp", use_container_width=True):
            current_time = int(time.time())
            st.info(f"""
            **Timestamp Analysis:**
            - Current: {current_time}
            - DateTime: {datetime.fromtimestamp(current_time)}
            - Timezone: UTC
            
            **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** Shopee ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            """)

else:
    # OAuth Login Section
    st.info("üëÜ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ Login ‡πÄ‡∏Ç‡πâ‡∏≤ Shopee OAuth")
    
    # Generate login URL
    timestamp = int(time.time())
    path = "/api/v2/shop/auth_partner"
    
    signature, sign_base = create_signature_method1(PARTNER_ID, path, timestamp)
    
    redirect_encoded = urllib.parse.quote(REDIRECT_URL, safe='')
    login_url = (
        f"https://partner.test-stable.shopeemobile.com{path}?partner_id={PARTNER_ID}"
        f"&timestamp={timestamp}"
        f"&sign={signature}"
        f"&redirect={redirect_encoded}"
    )
    
    st.markdown(f"""
    <div style="text-align: center; margin: 30px 0;">
        <a href="{login_url}" target="_self" style="
            background: linear-gradient(45deg, #ee4d2d, #ff6b35);
            color: white;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 10px;
            font-weight: bold;
            font-size: 18px;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(238, 77, 45, 0.3);
        ">
            üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Shopee OAuth
        </a>
    </div>
    """, unsafe_allow_html=True)
    
    # Debug login URL
    with st.expander("üîß Debug Login URL"):
        st.code(f"Login URL: {login_url}")
        st.code(f"Signature: {signature}")
        st.code(f"Sign Base: {sign_base}")

# Success section
if "access_token" in st.session_state:
    st.divider()
    st.success("üéâ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Access Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", use_container_width=True):
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
            timestamp = int(time.time())
            path = "/api/v2/shop/get_shop_info"
            
            signature, sign_base = create_signature_method1(
                PARTNER_ID, path, timestamp, 
                st.session_state.access_token, 
                st.session_state.shop_id
            )
            
            params = {
                "partner_id": PARTNER_ID,
                "timestamp": timestamp,
                "access_token": st.session_state.access_token,
                "shop_id": st.session_state.shop_id,
                "sign": signature
            }
            
            try:
                response = requests.get(
                    f"https://partner.test-stable.shopeemobile.com{path}",
                    params=params
                )
                
                if response.status_code == 200:
                    st.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.json(response.json())
                else:
                    st.error(f"‚ùå HTTP Error {response.status_code}")
                    st.text(response.text)
            except Exception as e:
                st.error(f"‚ùå Error: {e}")
    
    with col2:
        if st.button("üóëÔ∏è ‡∏•‡∏ö Token", use_container_width=True):
            for key in ['access_token', 'refresh_token', 'shop_id']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()

# Comprehensive troubleshooting guide
st.divider()
with st.expander("üìö ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"):
    st.markdown("""
    ## üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "Wrong Sign" ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    
    ### 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address Whitelist
    - ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° IP Address ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Shopee Console
    - ‚úÖ ‡∏•‡∏ö IP ‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    - ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ 0.0.0.0/0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    
    ### 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partner Key
    - ‚úÖ Copy Partner Key ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Shopee Console
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©
    - ‚úÖ ‡πÉ‡∏ä‡πâ Test API Partner Key (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Live)
    
    ### 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Signature Algorithm
    - ‚úÖ ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ encode ‡∏Ç‡∏≠‡∏á Partner Key
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ sort JSON body
    
    ### 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Request Format
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type header
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL encoding
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timestamp format
    
    ### 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment
    - ‚úÖ ‡πÉ‡∏ä‡πâ Test environment (partner.test-stable.shopeemobile.com)
    - ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network connectivity
    - ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Postman ‡∏´‡∏£‡∏∑‡∏≠ curl
    
    ### 6. ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Shopee Support
    - ‡∏´‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏• ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Shopee Developer Support
    - ‡πÅ‡∏ô‡∏ö request_id ‡∏à‡∏≤‡∏Å error response
    - ‡πÅ‡∏ô‡∏ö debug information
    """)

# Footer
st.markdown("""
---
<div style="text-align: center; color: #666;">
üîß <strong>Shopee API Debug Center</strong> - ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Shopee API<br>
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "wrong sign" error
</div>
""", unsafe_allow_html=True)
