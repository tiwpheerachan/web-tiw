import streamlit as st
import requests
import time
import hashlib
import hmac
import urllib.parse
import json

# ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ Shopee =====
PARTNER_ID = 1280109
PARTNER_KEY = "5a4e6e4c4d4375464c57506b7a42775a77466d686c534255574267514f494a54"
REDIRECT_URL = "https://web-tiw-f6am2usgmpzwel2adoj5qg.streamlit.app/"

# ===== Function ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå login Shopee (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) =====
def generate_login_url():
    timestamp = int(time.time())
    path = "/api/v2/shop/auth_partner"
    base_url = f"https://partner.test-stable.shopeemobile.com{path}"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á sign ‡∏î‡πâ‡∏ß‡∏¢ partner_id + path + timestamp (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà leading zeros)
    sign_base = f"{PARTNER_ID}{path}{timestamp}"
    
    # ‡πÅ‡∏õ‡∏•‡∏á PARTNER_KEY ‡∏à‡∏≤‡∏Å hex string ‡πÄ‡∏õ‡πá‡∏ô bytes ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á HMAC
    partner_key_bytes = bytes.fromhex(PARTNER_KEY)
    sign = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()

    # URL encode redirect URL
    redirect_encoded = urllib.parse.quote(REDIRECT_URL, safe='')
    
    login_url = (
        f"{base_url}?partner_id={PARTNER_ID}"
        f"&timestamp={timestamp}"
        f"&sign={sign}"
        f"&redirect={redirect_encoded}"
    )
    
    # Debug information
    st.session_state.debug_login = {
        "timestamp": timestamp,
        "sign_base": sign_base,
        "sign": sign,
        "partner_key_length": len(PARTNER_KEY),
        "login_url": login_url
    }
    
    return login_url

# ===== Function ‡∏î‡∏∂‡∏á Access Token (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) =====
def get_access_token(code, shop_id):
    timestamp = int(time.time())
    path = "/api/v2/auth/token/get"
    url = f"https://partner.test-stable.shopeemobile.com{path}"
    
    # Request body
    body = {
        "code": code,
        "shop_id": int(shop_id),
        "partner_id": PARTNER_ID
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á signature: partner_id + path + timestamp + request_body
    body_json = json.dumps(body, separators=(',', ':'), sort_keys=True)
    sign_base = f"{PARTNER_ID}{path}{timestamp}{body_json}"
    
    partner_key_bytes = bytes.fromhex(PARTNER_KEY)
    sign = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()

    # Parameters
    params = {
        "partner_id": PARTNER_ID,
        "timestamp": timestamp,
        "sign": sign
    }
    
    headers = {
        "Content-Type": "application/json"
    }
    
    # Debug information
    st.session_state.debug_token = {
        "url": url,
        "timestamp": timestamp,
        "sign_base": sign_base,
        "sign": sign,
        "body": body,
        "body_json": body_json,
        "params": params
    }
    
    return requests.post(url, params=params, json=body, headers=headers)

# ===== Function ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) =====
def get_shop_info(access_token, shop_id):
    timestamp = int(time.time())
    path = "/api/v2/shop/get_shop_info"
    url = f"https://partner.test-stable.shopeemobile.com{path}"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á signature: partner_id + path + timestamp + access_token + shop_id
    sign_base = f"{PARTNER_ID}{path}{timestamp}{access_token}{shop_id}"
    
    partner_key_bytes = bytes.fromhex(PARTNER_KEY)
    sign = hmac.new(partner_key_bytes, sign_base.encode('utf-8'), hashlib.sha256).hexdigest()

    params = {
        "partner_id": PARTNER_ID,
        "timestamp": timestamp,
        "access_token": access_token,
        "shop_id": shop_id,
        "sign": sign
    }
    
    # Debug information
    st.session_state.debug_shop = {
        "timestamp": timestamp,
        "sign_base": sign_base,
        "sign": sign,
        "params": params
    }

    return requests.get(url, params=params)

# ===== Function ‡∏´‡∏≤ IP Address ‡∏Ç‡∏≠‡∏á Streamlit =====
def get_streamlit_ip():
    try:
        # ‡πÉ‡∏ä‡πâ service ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ IP
        services = [
            "https://api.ipify.org?format=json",
            "https://httpbin.org/ip",
            "https://api.myip.com"
        ]
        
        ips = []
        for service in services:
            try:
                response = requests.get(service, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if 'ip' in data:
                        ips.append(data['ip'])
                    elif 'origin' in data:
                        ips.append(data['origin'])
            except:
                continue
        
        return list(set(ips))  # Remove duplicates
    except:
        return []

# ====== ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ======
st.set_page_config(page_title="Shopee OAuth Fixed", page_icon="üõí")
st.title("üõí Shopee OAuth & Shop Management (Fixed)")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
st.sidebar.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
st.sidebar.write(f"**Partner ID:** {PARTNER_ID}")
st.sidebar.write(f"**Redirect URL:** {REDIRECT_URL}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address
st.sidebar.subheader("üåê IP Address Information")
if st.sidebar.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address..."):
        current_ips = get_streamlit_ip()
        if current_ips:
            st.sidebar.success("‚úÖ IP Address ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:")
            for ip in current_ips:
                st.sidebar.code(ip)
            st.sidebar.warning("‚ö†Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° IP ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Shopee Console!")
        else:
            st.sidebar.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP ‡πÑ‡∏î‡πâ")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP Whitelist
with st.expander("üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç IP Address Whitelist"):
    st.write("""
    **‡∏õ‡∏±‡∏ç‡∏´‡∏≤:** ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ IP Address ‡∏õ‡∏•‡∏≠‡∏° (104.16.0.1, 104.16.3.2, 104.16.8.8) ‡πÉ‡∏ô Shopee Console
    
    **‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**
    1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å IP Address ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
    3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Shopee Open Platform Console
    4. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà App Management > [‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì]
    5. ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô "IP Address Whitelist" ‡πÉ‡∏´‡πâ:
       - ‡∏•‡∏ö IP ‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (104.16.0.1, 104.16.3.2, 104.16.8.8)
       - ‡πÄ‡∏û‡∏¥‡πà‡∏° IP Address ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    
    **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** Streamlit Cloud ‡∏≠‡∏≤‡∏à‡∏°‡∏µ IP Address ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ 
    ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° 0.0.0.0/0 (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å IP) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    """)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö query parameters
query_params = st.query_params
code = query_params.get("code")
shop_id = query_params.get("shop_id", "142837")

# Manual input option
with st.sidebar:
    st.subheader("üîß Manual Input")
    manual_code = st.text_input("Authorization Code", value=code or "")
    manual_shop_id = st.text_input("Shop ID", value=shop_id)
    
    if st.button("‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á"):
        if manual_code and manual_shop_id:
            # Update query params
            st.query_params.code = manual_code
            st.query_params.shop_id = manual_shop_id
            st.rerun()

# Main content
if code and shop_id:
    st.success(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö authorization code ‡πÅ‡∏•‡∏∞ shop_id: `{shop_id}`")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ ‡∏î‡∏∂‡∏á Access Token", type="primary", use_container_width=True):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Access Token..."):
                try:
                    response = get_access_token(code, shop_id)
                    
                    st.write(f"**Response Status:** {response.status_code}")
                    
                    if response.status_code == 200:
                        token_data = response.json()
                        
                        if "access_token" in token_data:
                            st.success("üéâ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Access Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            
                            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state
                            st.session_state.access_token = token_data["access_token"]
                            st.session_state.refresh_token = token_data.get("refresh_token", "")
                            st.session_state.shop_id = shop_id
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token
                            with st.expander("üìã Token Information"):
                                st.json(token_data)
                            
                            st.rerun()
                        else:
                            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡πÉ‡∏ô response")
                            st.json(token_data)
                    else:
                        st.error(f"‚ùå HTTP Error {response.status_code}")
                        try:
                            error_data = response.json()
                            st.json(error_data)
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞
                            if "error_sign" in str(error_data):
                                st.error("""
                                üö® **Wrong Sign Error**
                                
                                ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:
                                1. **IP Address ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Whitelist** (‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å)
                                2. Partner Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                3. Timestamp ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                4. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                                
                                **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address Whitelist ‡πÉ‡∏ô Shopee Console
                                """)
                        except:
                            st.text(response.text)
                            
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    with col2:
        if st.button("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
            # Clear session state
            for key in list(st.session_state.keys()):
                if key.startswith(('access_token', 'refresh_token', 'shop_id', 'debug_')):
                    del st.session_state[key]
            
            # Clear query params
            st.query_params.clear()
            st.rerun()

else:
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Login
    st.info("üëÜ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ OAuth")
    
    login_url = generate_login_url()
    
    st.markdown(f"""
    <div style="text-align: center; margin: 30px 0;">
        <a href="{login_url}" target="_self" style="
            background: linear-gradient(45deg, #ee4d2d, #ff6b35);
            color: white;
            padding: 15px 30px;
            text-decoration: none;
            border-radius: 10px;
            font-weight: bold;
            font-size: 18px;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(238, 77, 45, 0.3);
            transition: transform 0.2s;
        " onmouseover="this.style.transform='translateY(-2px)'" 
           onmouseout="this.style.transform='translateY(0)'">
            üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Shopee OAuth
        </a>
    </div>
    """, unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ access token
if hasattr(st.session_state, 'access_token') and st.session_state.access_token:
    st.divider()
    st.subheader("üè™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", use_container_width=True):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤..."):
                try:
                    shop_response = get_shop_info(
                        st.session_state.access_token, 
                        st.session_state.shop_id
                    )
                    
                    if shop_response.status_code == 200:
                        shop_data = shop_response.json()
                        
                        if "error" not in shop_data:
                            st.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            st.json(shop_data)
                        else:
                            st.error(f"‚ùå API Error: {shop_data}")
                    else:
                        st.error(f"‚ùå HTTP Error {shop_response.status_code}")
                        st.text(shop_response.text)
                        
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    with col2:
        if st.button("üóëÔ∏è ‡∏•‡∏ö Token", use_container_width=True):
            # Clear tokens
            for key in ['access_token', 'refresh_token', 'shop_id']:
                if hasattr(st.session_state, key):
                    delattr(st.session_state, key)
            st.rerun()

# Debug Information
with st.expander("üîß Debug Information"):
    st.subheader("Configuration")
    st.json({
        "partner_id": PARTNER_ID,
        "partner_key_preview": f"{PARTNER_KEY[:10]}...{PARTNER_KEY[-10:]}",
        "redirect_url": REDIRECT_URL,
        "query_params": dict(query_params)
    })
    
    # ‡πÅ‡∏™‡∏î‡∏á debug info ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    debug_sections = [
        ("Login Debug", "debug_login"),
        ("Token Debug", "debug_token"),
        ("Shop Debug", "debug_shop")
    ]
    
    for title, key in debug_sections:
        if hasattr(st.session_state, key):
            st.subheader(title)
            st.json(getattr(st.session_state, key))

# Test Account Information
with st.expander("üß™ Test Account Information"):
    st.code("""
    Shop ID: 142837
    Shop Account: SANDBOX.f216878ec16b03a6f962
    Shop Password: 1bdd53e0ec3b7fb2
    Shop Login URL: https://seller.test-stable.shopee.co.th
    """)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
st.info("""
## üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤

### 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç IP Address Whitelist (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address ‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
- ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô Shopee Console
- ‡∏•‡∏ö IP ‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà IP ‡∏à‡∏£‡∏¥‡∏á

### 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
- Partner ID: 1280109 ‚úÖ
- Partner Key: ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚úÖ  
- Redirect URL: ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô Console ‚úÖ

### 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö OAuth Flow
- ‡∏Ñ‡∏•‡∏¥‡∏Å "‡πÄ‡∏£‡∏¥‡πà‡∏° Shopee OAuth"
- Login ‡∏î‡πâ‡∏ß‡∏¢ Test Account
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "30 Days" authorization
- ‡∏Ñ‡∏•‡∏¥‡∏Å "Confirm Authorization"

### 4. ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ 0.0.0.0/0 ‡πÉ‡∏ô IP Whitelist (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network tab ‡πÉ‡∏ô Developer Tools
- ‡∏î‡∏π error message ‡πÉ‡∏ô Debug Information
""")
