import streamlit as st
import requests
import time
import hashlib
import hmac
import urllib.parse
import json
import base64
import re

# ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ Shopee =====
PARTNER_ID = 1280109
PARTNER_KEY = "5a4e6e4c4d4375464c57506b7a42775a77466d686c534255574267514f494a54"
# ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Redirect URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Shopee Console (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á / ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
REDIRECT_URL = "https://web-tiw-f6am2usgmpzwel2adoj5qg.streamlit.app/"

# ===== Function ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå login Shopee (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà) =====
def generate_login_url():
    timestamp = int(time.time())
    path = "/api/v2/shop/auth_partner"
    base_url = f"https://partner.test-stable.shopeemobile.com{path}"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á sign ‡∏î‡πâ‡∏ß‡∏¢ partner_id + path + timestamp
    sign_base = f"{PARTNER_ID}{path}{timestamp}"
    sign = hmac.new(bytes.fromhex(PARTNER_KEY), sign_base.encode(), hashlib.sha256).hexdigest()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ REDIRECT_URL ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ / ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not REDIRECT_URL.endswith('/'):
        redirect_url = f"{REDIRECT_URL}/"
    else:
        redirect_url = REDIRECT_URL
        
    redirect_encoded = urllib.parse.quote(redirect_url, safe="")
    login_url = (
        f"{base_url}?partner_id={PARTNER_ID}"
        f"&timestamp={timestamp}"
        f"&sign={sign}"
        f"&redirect={redirect_encoded}"
    )
    
    # Debug information
    st.session_state.last_login_url = login_url
    st.session_state.last_sign_base = sign_base
    st.session_state.last_sign = sign
    st.session_state.last_timestamp = timestamp
    
    return login_url

# ===== Function ‡∏î‡∏∂‡∏á Access Token (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà) =====
def get_access_token(code, shop_id):
    url = "https://partner.test-stable.shopeemobile.com/api/v2/auth/token/get"
    timestamp = int(time.time())
    path = "/api/v2/auth/token/get"
    
    # ‚úÖ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: partner_id + path + timestamp
    sign_base = f"{PARTNER_ID}{path}{timestamp}"
    sign = hmac.new(bytes.fromhex(PARTNER_KEY), sign_base.encode(), hashlib.sha256).hexdigest()

    headers = {"Content-Type": "application/json"}
    params = {
        "partner_id": PARTNER_ID,
        "timestamp": timestamp,
        "sign": sign
    }
    
    # Request body
    json_data = {
        "code": code,
        "shop_id": int(shop_id),
        "partner_id": PARTNER_ID
    }

    # Debug information
    debug_info = {
        "url": url,
        "method": "POST",
        "headers": headers,
        "params": params,
        "json_data": json_data,
        "sign_base": sign_base,
        "sign": sign,
        "timestamp": timestamp
    }
    st.session_state.last_token_request = debug_info
    
    return requests.post(url, headers=headers, params=params, json=json_data)

# ===== Function ‡∏î‡∏∂‡∏á Access Token ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2 =====
def get_access_token_alt(code, shop_id):
    url = "https://partner.test-stable.shopeemobile.com/api/v2/auth/token/get"
    timestamp = int(time.time())
    path = "/api/v2/auth/token/get"
    
    # Request body
    json_data = {
        "code": code,
        "shop_id": int(shop_id),
        "partner_id": PARTNER_ID
    }
    
    # ‚úÖ ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: partner_id + path + timestamp + body
    body_str = json.dumps(json_data, separators=(',', ':'), sort_keys=True)
    sign_base = f"{PARTNER_ID}{path}{timestamp}{body_str}"
    sign = hmac.new(bytes.fromhex(PARTNER_KEY), sign_base.encode(), hashlib.sha256).hexdigest()

    headers = {"Content-Type": "application/json"}
    params = {
        "partner_id": PARTNER_ID,
        "timestamp": timestamp,
        "sign": sign
    }

    # Debug information
    debug_info = {
        "url": url,
        "method": "POST",
        "headers": headers,
        "params": params,
        "json_data": json_data,
        "sign_base": sign_base,
        "sign": sign,
        "timestamp": timestamp,
        "body_str": body_str
    }
    st.session_state.last_token_request_alt = debug_info
    
    return requests.post(url, headers=headers, params=params, json=json_data)

# ===== Function ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ =====
def get_shop_info(access_token, shop_id):
    url = "https://partner.test-stable.shopeemobile.com/api/v2/shop/get_shop_info"
    timestamp = int(time.time())
    path = "/api/v2/shop/get_shop_info"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á signature: partner_id + path + timestamp + access_token + shop_id
    sign_base = f"{PARTNER_ID}{path}{timestamp}{access_token}{shop_id}"
    sign = hmac.new(bytes.fromhex(PARTNER_KEY), sign_base.encode(), hashlib.sha256).hexdigest()

    params = {
        "partner_id": PARTNER_ID,
        "timestamp": timestamp,
        "access_token": access_token,
        "shop_id": shop_id,
        "sign": sign
    }

    return requests.get(url, params=params)

# ===== Function ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partner Key =====
def validate_partner_key(key):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô hex string ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô bytes
        bytes.fromhex(key)
        return True
    except ValueError:
        return False

# ===== Function ‡∏™‡∏£‡πâ‡∏≤‡∏á direct URL ‡∏ó‡∏µ‡πà‡∏°‡∏µ code ‡πÅ‡∏•‡∏∞ shop_id =====
def create_direct_url(code, shop_id):
    base_url = REDIRECT_URL
    if base_url.endswith('/'):
        base_url = base_url[:-1]
    
    return f"{base_url}?code={code}&shop_id={shop_id}"

# ====== ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ======
st.set_page_config(page_title="Shopee OAuth & Shop Data", page_icon="üõí")
st.title("üõí Shopee OAuth & Shop Management")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
st.sidebar.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
st.sidebar.write(f"**Partner ID:** {PARTNER_ID}")
st.sidebar.write(f"**Shop ID:** 142837")
st.sidebar.write(f"**Redirect URL:** {REDIRECT_URL}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partner Key
if not validate_partner_key(PARTNER_KEY):
    st.error("‚ö†Ô∏è **Partner Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!**")
    st.write("Partner Key ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô hex string (0-9, a-f)")
    st.stop()

# ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ query parameters
query_params = st.query_params

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö manual input
manual_input = st.sidebar.checkbox("‡πÉ‡∏™‡πà code ‡πÅ‡∏•‡∏∞ shop_id ‡πÄ‡∏≠‡∏á")

if manual_input:
    with st.sidebar:
        manual_code = st.text_input("Authorization Code")
        manual_shop_id = st.text_input("Shop ID", "142837")
        
        if st.button("‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á"):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ó‡∏µ‡πà‡∏°‡∏µ code ‡πÅ‡∏•‡∏∞ shop_id
            direct_url = create_direct_url(manual_code, manual_shop_id)
            st.success(f"‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {direct_url}")
            st.markdown(f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á]({direct_url})")

# ‡∏•‡∏ö parameters ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (empty values)
filtered_params = {}
for key, value in query_params.items():
    if value and value.strip():  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ values ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
        filtered_params[key] = value

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
code = filtered_params.get("code")
shop_id = filtered_params.get("shop_id")

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ code ‡πÅ‡∏•‡∏∞ shop_id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if code and shop_id:
    st.success(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö authorization code ‡πÅ‡∏•‡∏∞ shop_id: `{shop_id}`")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏∂‡∏á Access Token
    method = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Signature:",
        ["‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: partner_id + path + timestamp", 
         "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: partner_id + path + timestamp + body"],
        index=0
    )
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button("üîÑ ‡∏î‡∏∂‡∏á Access Token", use_container_width=True, type="primary"):
            with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Access Token..."):
                try:
                    if method == "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: partner_id + path + timestamp":
                        res = get_access_token(code, shop_id)
                        debug_key = "last_token_request"
                    else:
                        res = get_access_token_alt(code, shop_id)
                        debug_key = "last_token_request_alt"
                    
                    st.write("üìã **Response Status:**", res.status_code)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á request details
                    with st.expander("üìã Request Details"):
                        st.json(st.session_state.get(debug_key, {}))
                    
                    if res.status_code == 200:
                        token_data = res.json()
                        
                        if "access_token" in token_data:
                            access_token = token_data["access_token"]
                            refresh_token = token_data.get("refresh_token", "")
                            
                            st.success("üéâ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Access Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Token
                            with st.expander("üìã Token Information"):
                                st.json(token_data)
                            
                            # ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô session state
                            st.session_state.access_token = access_token
                            st.session_state.shop_id = shop_id
                            st.session_state.refresh_token = refresh_token
                            
                            # Auto-refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
                            st.rerun()
                            
                        else:
                            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡πÉ‡∏ô response")
                            st.json(token_data)
                    else:
                        st.error(f"‚ùå HTTP Error {res.status_code}")
                        try:
                            error_data = res.json()
                            st.json(error_data)
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                            if "error_sign" in str(error_data):
                                st.info("""
                                üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Wrong sign:**
                                1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Partner Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                2. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
                                3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ timestamp ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                                """)
                        except:
                            st.text(res.text)
                            
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    with col2:
        if st.button("üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
            # ‡∏•‡πâ‡∏≤‡∏á session state ‡πÅ‡∏•‡∏∞ query params
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            # Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ query params
            st.rerun()

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ access token
if hasattr(st.session_state, 'access_token') and st.session_state.access_token:
    st.divider()
    st.subheader("üè™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤", use_container_width=True):
            with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤..."):
                try:
                    shop_res = get_shop_info(st.session_state.access_token, st.session_state.shop_id)
                    
                    if shop_res.status_code == 200:
                        shop_data = shop_res.json()
                        
                        if "error" not in shop_data:
                            st.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            st.json(shop_data)
                        else:
                            st.error(f"‚ùå API Error: {shop_data}")
                    else:
                        st.error(f"‚ùå HTTP Error {shop_res.status_code}")
                        st.text(shop_res.text)
                        
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    with col2:
        if st.button("üîÑ ‡∏•‡πâ‡∏≤‡∏á Token", use_container_width=True):
            # ‡∏•‡πâ‡∏≤‡∏á token ‡∏à‡∏≤‡∏Å session state
            if hasattr(st.session_state, 'access_token'):
                del st.session_state.access_token
            if hasattr(st.session_state, 'shop_id'):
                del st.session_state.shop_id
            if hasattr(st.session_state, 'refresh_token'):
                del st.session_state.refresh_token
            st.rerun()

else:
    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ query_token, cookie_token
    st.warning("""
    ‚ö†Ô∏è **‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:** Shopee ‡∏°‡∏±‡∏Å‡∏™‡πà‡∏á `query_token=, cookie_token=` ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á code ‡πÅ‡∏•‡∏∞ shop_id
    
    **‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**
    1. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ "‡πÉ‡∏™‡πà code ‡πÅ‡∏•‡∏∞ shop_id ‡πÄ‡∏≠‡∏á" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    2. ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ workaround ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    """)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ workaround
    with st.expander("üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Workaround"):
        st.write("""
        1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login Shopee" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ Authorization ‡∏Ç‡∏≠‡∏á Shopee ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "30 Days" ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å "Confirm Authorization"
        3. ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error `query_token=, cookie_token=` ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ó‡∏µ‡πà URL ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
        4. URL ‡∏à‡∏∞‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢: `https://web-tiw-f6am2usgmpzwel2adoj5qg.streamlit.app/?query_token=&cookie_token=`
        5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÄ‡∏õ‡πá‡∏ô: `https://web-tiw-f6am2usgmpzwel2adoj5qg.streamlit.app/?code=YOUR_CODE&shop_id=142837`
        6. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà YOUR_CODE ‡∏î‡πâ‡∏ß‡∏¢ code ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Shopee (‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Network tab ‡πÉ‡∏ô Developer Tools)
        7. ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        """)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Account
    with st.expander("üß™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Account"):
        st.write("**Shop ID:** 142837")
        st.write("**Shop Account:** SANDBOX.f216878ec16b03a6f962")
        st.write("**Shop Password:** 1bdd53e0ec3b7fb2")
        st.write("**Shop Login URL:** https://seller.test-stable.shopee.co.th")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    with st.expander("üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.write("""
        1. ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login Shopee" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        2. ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Account ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login
        3. ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "30 Days" ‡πÉ‡∏ô Authorization Period
        4. ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å "Confirm Authorization" ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Shopee
        5. üîÑ ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Workaround ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        6. üéØ ‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏î‡∏∂‡∏á Access Token" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ token
        """)
    
    login_url = generate_login_url()
    
    st.markdown(f"""
    <div style="text-align: center; margin: 20px 0;">
        <a href="{login_url}" target="_self" style="
            background-color: #ee4d2d;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            font-weight: bold;
            display: inline-block;
        ">üü¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login Shopee</a>
    </div>
    """, unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug
with st.expander("üîß Debug Information"):
    st.write("**All Query Parameters (Raw):**")
    st.json(dict(query_params))
    
    st.write("**Filtered Parameters:**")
    st.json(filtered_params)
    
    st.write("**Configuration:**")
    st.write(f"- Partner ID: {PARTNER_ID}")
    st.write(f"- Partner Key: {PARTNER_KEY[:5]}...{PARTNER_KEY[-5:]}")
    st.write(f"- Redirect URL: {REDIRECT_URL}")
    
    if hasattr(st.session_state, 'last_login_url'):
        st.write("**Last Login URL:**")
        st.write(st.session_state.last_login_url)
        st.write(f"- Sign Base: {st.session_state.last_sign_base}")
        st.write(f"- Sign: {st.session_state.last_sign}")
        st.write(f"- Timestamp: {st.session_state.last_timestamp}")
    
    if hasattr(st.session_state, 'access_token'):
        st.write("**Session State:**")
        st.write(f"- Access Token: {st.session_state.access_token[:20]}...")
        st.write(f"- Shop ID: {st.session_state.shop_id}")

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
st.info("""
## üîç ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ query_token, cookie_token

### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ Developer Tools ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
1. ‡∏Å‡∏î F12 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤ > Inspect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Developer Tools
2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö Network
3. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠ Login Shopee" ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ Confirm Authorization
4. ‡∏Ñ‡∏•‡∏¥‡∏Å "Confirm Authorization"
5. ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Network ‡∏à‡∏∞‡∏°‡∏µ request ‡∏ó‡∏µ‡πà‡∏°‡∏µ code ‡πÅ‡∏•‡∏∞ shop_id
6. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å code ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "Authorization Code" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢

### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ Postman ‡∏´‡∏£‡∏∑‡∏≠ API Client ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
1. ‡∏™‡∏£‡πâ‡∏≤‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Shopee API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
2. ‡πÉ‡∏ä‡πâ Partner ID ‡πÅ‡∏•‡∏∞ Partner Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
3. ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Shopee ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Redirect URL
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Redirect URL ‡πÉ‡∏ô Shopee Console ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ / ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)
3. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ query parameters
""")
